// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract CrossChainBarter {
    address public owner;

    // Struktur barter
    struct Barter {
        address user1;
        address user2;
        uint256 amountUser1;
        uint256 amountUser2;
        bool isComplete;
    }

    // Daftar barter yang sudah dibuat
    mapping(uint256 => Barter) public barters;
    uint256 public barterCount = 0;

    // Event
    event BarterCreated(uint256 barterId, address indexed user1, address indexed user2);
    event BarterCompleted(uint256 barterId);

    constructor() {
        owner = msg.sender;
    }

    // Fungsi membuat barter
    function createBarter(address _user2, uint256 _amountUser1, uint256 _amountUser2) public {
        barterCount++;
        barters[barterCount] = Barter(msg.sender, _user2, _amountUser1, _amountUser2, false);
        emit BarterCreated(barterCount, msg.sender, _user2);
    }

    // Fungsi menyelesaikan barter
    function completeBarter(uint256 _barterId) public {
        Barter storage barter = barters[_barterId];
        require(barter.user2 == msg.sender, "Bukan pengguna yang valid");
        require(!barter.isComplete, "Barter sudah selesai");

        barter.isComplete = true;
        emit BarterCompleted(_barterId);
    }
}
